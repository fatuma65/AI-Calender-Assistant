// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum TensityLevels {
  High
  Meduim
  Low
}
enum ReminderMethod {
  Email
  Push
  Sms
}
enum ReminderStatus{
  Pending
  Sent
  Dismissed
}

model User {
  id                  String   @id @default(uuid())
  email               String  @unique
  firstname           String? 
  lastname            String?
  password            String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  events              Event[]
  reminders           Reminder[]
  userPreferences     UserPreferences? 
  analytics           Analytics[]
  locationData        LocationData[]
}

model Event {
  id                  String @id @default(uuid())
  userId              String
  title               String
  description         String?
  startTime           DateTime @default(now())
  endTime             DateTime 
  location            String
  tensityLevel        TensityLevels?
  category            String?
  isRecurring         Boolean @default(false)
  recurrencePattern   Json
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user                User  @relation(fields: [userId], references: [id])
  reminders           Reminder[]
  locationData        LocationData[]
}

model Reminder {
  id                  String @id @default(uuid())
  eventId             String
  userId              String
  reminderTime        DateTime
  reminderMethod      ReminderMethod
  status              ReminderStatus
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user                User @relation(fields: [userId], references:[id])
  event               Event @relation(fields: [eventId], references: [id])
}

model UserPreferences {
  id                          String @id @default(uuid())
  userId                      String  @unique
  date                        DateTime
  notificationPreference      Json
  defaultEventDuration        Int
  colorCodingPreferences      Json
  recurrencePatternSummary    Json
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  user                        User   @relation(fields: [userId], references: [id])
}

model Analytics {
  id                          String @id @default(uuid())
  userId                      String
  date                        DateTime
  totalEvents                 Int
  highTensityEvents           Int
  eventDurationSummary        Json
  recurrencePatternSummary    Json
  createdAt                   DateTime @default(now())

  user                        User   @relation(fields: [userId], references: [id])
}

model LocationData {
  id                          String @id @default(uuid())
  eventId                     String
  userId                      String
  location                    Json
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  user                        User @relation(fields: [userId], references:[id])
  event                       Event @relation(fields: [eventId], references: [id])
}