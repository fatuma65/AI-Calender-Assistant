// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum TensityLevels {
  HIGH
  MEDIUM
  LOW
}
enum ReminderMethod {
  EMAIL
  PUSH
  SMS
}
enum ReminderStatus{
  PENDING
  SENT
  CANCELLED
}
enum Theme {
  DARK
  LIGHT
  SYSTEM
}

model User {
  id                  String   @id @default(uuid())
  email               String  @unique @db.VarChar(100)
  firstname           String? @db.VarChar(100)
  lastname            String? @db.VarChar(100)
  password            String  @db.VarChar(100)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  events              Event[]
  reminders           Reminder[]
  userPreferences     UserPreferences? 
  analytics           Analytics[]
  locationData        LocationData[]
}

model Event {
  id                  String @id @default(uuid())
  userId              String
  title               String  @db.VarChar(2200)
  description         String?  @db.Text
  startTime           DateTime @default(now())
  endTime             DateTime @default(now())
  location            String?
  tensityLevel        TensityLevels?
  category            String?
  isRecurring         Boolean @default(false)
  recurrencePattern   Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user                User  @relation(fields: [userId], references: [id])
  reminders           Reminder[]
  locationData        LocationData[]
}

model Reminder {
  id                  String @id @default(uuid())
  eventId             String
  userId              String
  reminderTime        DateTime
  reminderMethod      ReminderMethod?
  status              ReminderStatus?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user                User @relation(fields: [userId], references:[id])
  event               Event @relation(fields: [eventId], references: [id])
}

model UserPreferences {
  id                          String @id @default(uuid())
  userId                      String  @unique
  date                        DateTime
  notifications               Json?
  theme                       Theme?
  eventDuration               Int
  timeZone                    String?
  colorCodingPreferences      Json?
  recurrencePatternSummary    Json?
  workingHours                Json?
  preferredMeetingTimes       Json?

  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  user                        User   @relation(fields: [userId], references: [id])
}

model Analytics {
  id                          String @id @default(uuid())
  userId                      String
  date                        DateTime @default(now())
  totalEvents                 Int
  highTensityEvents           Int
  eventDurationSummary        Json?
  recurrencePatternSummary    Json?
  createdAt                   DateTime @default(now())

  user                        User   @relation(fields: [userId], references: [id])
}

model LocationData {
  id                          String @id @default(uuid())
  eventId                     String
  userId                      String
  location                    Json?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  user                        User @relation(fields: [userId], references:[id])
  event                       Event @relation(fields: [eventId], references: [id])
}